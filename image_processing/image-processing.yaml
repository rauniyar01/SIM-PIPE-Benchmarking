apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: image-processing-pipeline-
spec:
  entrypoint: run-image-processing-pipeline
  volumes:
    - name: out-volume
      emptyDir: {}
  arguments:
    parameters:
      - name: input_key
        value: "animal-dog.jpg"  # Match the file from the artifacts bucket
  templates:
    - name: run-image-processing-pipeline
      dag:
        tasks:
          - name: filter-image
            template: filter-image
            arguments:
              artifacts:
                - name: Input
                  s3:
                    bucket: artifacts
                    key: "{{workflow.parameters.input_key}}"
          - name: rotate-image
            template: rotate-image
            dependencies: [filter-image]
            arguments:
              artifacts:
                - name: filtered_image
                  from: "{{tasks.filter-image.outputs.artifacts.filtered_image}}"
          - name: resize-image
            template: resize-image
            dependencies: [rotate-image]
            arguments:
              artifacts:
                - name: rotated_image
                  from: "{{tasks.rotate-image.outputs.artifacts.rotated_image}}"
    - name: filter-image
      inputs:
        artifacts:
          - name: Input
            path: /in/input.jpg
      container:
        image: rauniyar01/filter-image:1.0
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Starting filter-image step"
            echo "Listing input directory:"
            ls -la /in
            echo "Running filter script"
            python filter.py
            echo "Listing output directory after processing:"
            ls -la /out
        volumeMounts:
          - name: out-volume
            mountPath: /out
      outputs:
        artifacts:
          - name: filtered_image
            path: /out/filtered_image.jpg
          - name: performance_filter
            path: /out/performance_filter.txt
    - name: rotate-image
      inputs:
        artifacts:
          - name: filtered_image
            path: /in/filtered_image.jpg
      container:
        image: rauniyar01/rotate-image:1.0
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Starting rotate-image step"
            echo "Listing input directory:"
            ls -la /in
            echo "Listing output directory before processing:"
            ls -la /out
            echo "Running rotate script"
            python /app/rotate.py
            echo "Listing output directory after processing:"
            ls -la /out
        volumeMounts:
          - name: out-volume
            mountPath: /out
      outputs:
        artifacts:
          - name: rotated_image
            path: /out/rotated_image.jpg
          - name: performance_rotate
            path: /out/performance_rotate.txt
    - name: resize-image
      inputs:
        artifacts:
          - name: rotated_image
            path: /in/rotated_image.jpg
      container:
        image: rauniyar01/resize-image:1.0
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Starting resize-image step"
            echo "Listing input directory:"
            ls -la /in
            echo "Listing output directory before processing:"
            ls -la /out
            echo "Running resize script"
            python /app/resize.py
            echo "Listing output directory after processing:"
            ls -la /out
        volumeMounts:
          - name: out-volume
            mountPath: /out
      outputs:
        artifacts:
          - name: resized_image
            path: /out/resized_image.jpg
          - name: performance_resize
            path: /out/performance_resize.txt